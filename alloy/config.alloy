// Log type definitions
local.file_match "access_log" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/logs/*.log",
		job         = "access_logs",
		source      = "access_logs",
	}]
}

local.file_match "request_log" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/request_logs/*.log",
		job         = "request_logs",
		source      = "request_logs",
	}]
}

// Access log pipeline
loki.process "access_log" {
	forward_to = [loki.write.default.receiver]

	stage.regex {
		expression = "\\[(?P<timestamp>\\d{2}/\\w+/\\d{4}:\\d{2}:\\d{2}:\\d{2} [+-]\\d{4})\\]"
	}

	stage.timestamp {
		source = "timestamp"
		format = "02/Jan/2006:15:04:05 -0700"
	}

	stage.regex {
		expression = "\"(?P<method>GET|PUT|POST|HEAD|DELETE|PATCH|OPTIONS|CONNECT|TRACE|QUERY) /(?P<prefix>[^/]+)/api(?P<path>/[^ ?\"]+)"
	}

	stage.replace {
		expression = "(/[0-9]+)"
		source     = "path"
		replace    = "/:id"
	}

	stage.labels {
		values = {
			method = null,
			path   = null,
			prefix = null,
		}
	}
}

// Request log pipeline
loki.process "request_log" {
	forward_to = [loki.write.default.receiver]

	// Extract filepath and timestamp like 2025-05-16 10:09:59.714
	stage.regex {
		expression = "^(?P<file>[^ ]+) (?P<timestamp>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{3})"
	}

	stage.timestamp {
		source = "timestamp"
		format = "2006-01-02 15:04:05.000"
		location = "Asia/Tokyo"
	}

	// Extract schemaName, tenantId, userId, traceId
	stage.regex {
		expression = "\\[REQ\\] schemaName:(?P<schema_name>[^ ]+) tenantId:(?P<tenant_id>\\d+) userId:(?P<user_id>(\\d+|\\[no user id\\])) traceId:(?P<trace_id>([^ ]+)) (?P<req_res_type>[><]) "
	}

	// Transform req_res_type from ">" to "Request" and "<" to "Response"
	stage.template {
		source = "req_res_type"
		template = "{{ if eq .req_res_type \">\" }}Request{{ else if eq .req_res_type \"<\" }}Response{{ else }}{{.req_res_type}}{{ end }}"
	}

	// Extract request info (HTTP method, path, destination)
	stage.regex {
		expression = "> (?P<destination>[^:]+:\\d+) (?P<http_method>GET|PUT|POST|HEAD|DELETE|PATCH|OPTIONS|CONNECT|TRACE) (?P<path>/[^ ?]+)"
	}

	// Extract HTTP status from response logs
	stage.regex {
		expression = "< (?P<http_status>\\d+)"
	}

	stage.replace {
		expression = "(/[0-9]+)"
		source     = "path"
		replace    = "/:id"
	}

	// Set labels from extracted values
	stage.labels {
		values = {
			schema_name = null,
			tenant_id = null,
			user_id = null,
			trace_id = null,
			http_method = null,
			path = null,
			http_status = null,
			destination = null,
			req_res_type = null,
		}
	}
}

loki.source.file "request_log" {
	targets               = local.file_match.request_log.targets
	forward_to            = [loki.process.request_log.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

loki.source.file "access_log" {
	targets               = local.file_match.access_log.targets
	forward_to            = [loki.process.access_log.receiver]
	legacy_positions_file = "/tmp/positions.yaml"
}

loki.write "default" {
	endpoint {
		url = "http://loki:3100/loki/api/v1/push"
	}
	external_labels = {}
}
